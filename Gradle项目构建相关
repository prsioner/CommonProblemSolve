1. javaVersion 1.8 已经包含了retrolambda 模块，不需要单独引用 classpath 'me.tatarka:gradle-retrolambda:3.2.0'
2.插件不兼容问题

Unable to find method 'org.gradle.api.tasks.compile.CompileOptions.setBootClasspath(Ljava/lang/String;)V'.
Possible causes for this unexpected error include:
这是因为工程路径下build.gradle 版本与 gradle-wapper.propertise 内配置的gradle 插件版本不一致导致，配置为配套即可
 

2.强制刷新依赖版本
工程引用太多第三方库，maven 会给我们保存缓存，有缓存会先用缓存，然后定时更新，有时会出现项目无法同步最新代码的问题，可以使用gradle 命令进行强制刷新版本

命令行：  gradlew --refresh-dependencies assemble

3.批量修改生成Apk文件名
app build.gradle  android{} 内指定：
applicationVariants.all {
    variant ->
        variant.outputs.all {

            outputFileName = "app_v${defaultConfig.versionName}_${variant.productFlavors[0].name}_" + buildType.name + ".apk";

        }
}


4.有些第三方库又同时引用不同版本的一个库，无法编译通过，可以强制指定该库的引用版本
app build.gradle 外层指定：

configurations.all {

        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.parse.bolts') {
                details.useVersion "1.4.0"
            }
        }

}

4.动态配置AndroidManifest文件
我们需要打包多渠道包的时候，进行友盟统计，就需要区分不同的渠道
androidManifest的配置：
<meta-data
            android:name="UMENG_CHANNEL"
            android:value="google" />

app build.gradle  android{} 内添加：
productFlavors {
        baidu {
            manifestPlaceholders = [UMENG_CHANNEL: "C00001"]
        }
        _360 {
            manifestPlaceholders = [UMENG_CHANNEL: "C00002"]
        }
        yingyongbao {
            manifestPlaceholders = [UMENG_CHANNEL: "C00003"]
        }
        ali {
            manifestPlaceholders = [UMENG_CHANNEL: "C00004"]
        }
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL: "C00005"]
        }
        ...

    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL: name]
    }


5.自定义BuildConfig
BuildConfig 这个类是 android gradle 构建脚本自动生成的类，无需用户手动修改，里面有很多app 配置相关的属性可以直接使用，例如DEBUG
BuildConfig.DEBUG 在调试的时候返回true,正式打包的时候，返回false,非常好用
那我们可以自定义一些属性到BuildConfig 里面吗，当然是可以的

gradle 提供了buildConfigField(String type,String name,String value)让我们可以添加自己的常量到BuildConfig中

productFlavors{
        google {
            buildConfigField 'String','WEB_URL','"http://www.google.com"'
        }
        baidu {
            buildConfigField 'String','WEB_URL','"http://www.baidu.com"'
        }

    }

我们看同步后的BuildConfig 类
public final class BuildConfig {
  public static final boolean DEBUG = Boolean.parseBoolean("true");
  public static final String APPLICATION_ID = "com.prsioner.testapp";
  public static final String BUILD_TYPE = "debug";
  public static final String FLAVOR = "baidu";
  public static final int VERSION_CODE = 1;
  public static final String VERSION_NAME = "1.0";
  // Fields from product flavor: baidu
  public static final String WEB_URL = "http://www.baidu.com";
}

甚至可以根据debug、release 来配置不同的value值

android{
   buildTypes{
      debug{
        buildConfigField 'String','Name','"value1"'
      }
      release{
        buildConfigField 'String','Name','"value2"'
      }
   }
}


6.DEX配置选项
android studio 配置编译项目有时会提示java.lang.OutOfMemoryError:GC overhead limit exceeded ,内存不足
我们可以配置
dexOptions{} 来扩容编译空间，
android{
  dexOptions{
    javaMaxHeapSize '4g'   //前提电脑有这么大的内存
  }
 }

有时，我们工程很庞大，代码方法太多，函数超过65535个数时，就需要强制开启jumbMode 模式才可以构建成功

dexOptions{
   jumbMode true
}
我么还可以通过提升编译线程数量来提升编译效率

dexOptions{
  threadCount 2
}

7.突破方法数超过65535个限制
android{
 defalutConfig{
  multiDexEnabled true
 }
}
dependencies{
 compile 'com.android.support.multidex:1.0.1'
}

定义Application 继承自 MultiDexApplication即可，如果application继承自第三方无法修改，则可以重写attachBaseContext方法

public class SimpleApplication extends Application{
   @overRide
   public void attachBaseContext(Context context){
      super.attachBaseContext(context);
      MultiDex.install(this);
   } 

}


8.自动清理未使用资源
 
 android{
    buildTypes{
      release {
        shrinkResources true
      }
    }
  }


9.android studio 默认使用的编译器可能有点慢，可以使用 Jack 或Jill 这个全新的、高性能的编译器
启用方式
android{
  productFlavors{
   google{
     useJack true
   }
  }
}




























